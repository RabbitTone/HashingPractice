import java.util.LinkedList;
public class SeperateChainingHash<AnyType>{
  /**
   * Construct the hash table.
   * */
  public SeperateChainingHash(){
    this(DEFAULT_TABLE_SIZE);
  }
  /**
   * Construct the hash table. 
   * @param size approximate table size.
   * */
  public SeperateChainingHash(int size){
    theLists = new LinkedList[nextPrime(size)];
    for(int i = 0; i < theLists.length; i++)
      theLists[i] = new LinkedList<>();
  }
  /**
   * Instert into the hash table. If the item is
   * already present, then do nothing.
   * @param x the item to inster.
   * */
  public void insert(AnyType x){
    List<AnyType> whichList = theLists[myhash(x)];
    if(!whichLists.contains(x)){
      whichLIst.add(x);
      if(++currentSize > theLists.length)
        rehash();
    }
  }
  /**
   * Remove from the hash table.
   * @param x the item to remove.
   * */
  public void remove(AnyType x){
    List<AnyType> whichList = theLists[myhash(x)];
    if(whichList.containts(x)){
      whichList.remove(x);
      currentSize--;
    }
  }
  /**
   * Find an intem in the hash table.
   * @param x the itme to search for. 
   * @return true if x is not found
   * */
  public boolean contains(AnyType x){
    List<AnyType> whichList = theLists[myhash(x)];
    return whichList.contains(x);
  }
  /**
   * Make hash table logically empty.
   * */
  public void makeEmpty(){
    for(int i = 0; i < theLists.length; i++)
      theLists[i].clear();
    currentSize = 0;
  }
  
  private static final int DEFAULT_TABLE_SIZE = 101;
  
  private List[] theLists;
  private int currentSize;
  
  private void rehash(){
    
  }
  private int myhash(AnyType x){
    int val = x.hashCode();
    val %= theLists.length;
    return val;
  }
  private static int nextPrime(int n){
    
  }
  private static boolean isPrime(int n){
    
  }
}
